@page
@using EVDealerSales.BusinessObject.DTOs.VehicleDTOs
@using EVDealerSales.Business.Utils
@model EVDealerSales.Presentation.Pages.Vehicle.IndexModel
@{
    ViewData["Title"] = "Vehicle Management";
}

@section Styles {
    <link rel="stylesheet" href="~/css/staff-management.css" />
}

<div class="staff-page-clean">
    <div class="container">
        <!-- Header -->
        <div class="staff-header-clean">
            <div style="display: flex; justify-content: space-between; align-items: start;">
                <div>
                    <h1 class="staff-title-clean">
                        <i class="bi bi-car-front"></i>
                        Vehicle Inventory
                    </h1>
                    <p class="staff-subtitle-clean">
                        Manage your electric vehicle inventory and specifications
                    </p>
                </div>
                <div>
                    <a asp-page="./Create" class="btn-clean btn-primary-clean">
                        <i class="bi bi-plus-circle"></i>
                        Add Vehicle
                    </a>
                </div>
            </div>
        </div>

        <!-- Manager Chat Card (SignalR) -->
        <div class="staff-card-clean" style="margin-top: 1rem;">
            <div class="staff-card-header-clean">
                <h3 class="staff-card-title-clean">
                    <i class="bi bi-chat-dots"></i>
                    Manager Chatbot
                </h3>
            </div>
            <div class="staff-card-body-clean">
                <div id="chatArea">
                    <div style="display: flex; gap: 1rem; align-items: flex-start;">
                        <textarea id="chatPrompt" class="form-control" placeholder="Ask the internal assistant for stocking or sales recommendations..." rows="3" style="flex:1; background: #0b0b0b; color: #fff; border: 1px solid #1a1a1a;"></textarea>
                        <div style="display:flex; flex-direction: column; gap: 0.5rem;">
                            <button id="askBtn" type="button" class="btn-clean btn-primary-clean">Ask</button>
                            <button id="generateSpecBtn" type="button" class="btn-clean btn-secondary-clean" title="Generate vehicle spec from instruction">Generate Spec</button>
                            <button id="autoCreateBtn" type="button" class="btn-clean btn-danger-clean" title="Automatically generate and create vehicle">Auto Create</button>
                        </div>
                    </div>

                    <div id="responses" style="margin-top: 1rem;"></div>
                </div>
            </div>
        </div>

        <!-- Alerts -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="bi bi-check-circle-fill"></i>
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="bi bi-exclamation-triangle-fill"></i>
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        <!-- Search and Filter Card -->
        <div class="staff-card-clean">
            <div class="staff-card-header-clean">
                <h3 class="staff-card-title-clean">
                    <i class="bi bi-funnel-fill"></i>
                    Search & Filters
                </h3>
            </div>
            <div class="staff-card-body-clean">
                <form method="get">
                    <!-- Search Bar -->
                    <div class="search-bar-clean">
                        <i class="bi bi-search search-icon-clean"></i>
                        <input type="text" class="search-input-clean" name="SearchTerm"
                               value="@Model.SearchTerm"
                               placeholder="Search by model or trim...">
                    </div>

                    <!-- Filter Grid -->
                    <div class="filter-grid-clean">
                        <div class="filter-group-clean">
                            <label class="filter-label-clean">
                                <i class="bi bi-sort-down"></i>
                                Sort By
                            </label>
                            <select name="SortBy" class="filter-input-clean">
                                <option value="">Default</option>
                                <option value="ModelName" selected="@(Model.SortBy == "ModelName")">Model Name</option>
                                <option value="ModelYear" selected="@(Model.SortBy == "ModelYear")">Model Year</option>
                                <option value="BasePrice" selected="@(Model.SortBy == "BasePrice")">Base Price</option>
                            </select>
                        </div>
                        <div class="filter-group-clean">
                            <label class="filter-label-clean">
                                <i class="bi bi-arrow-down-up"></i>
                                Order
                            </label>
                            <select name="SortDesc" class="filter-input-clean">
                                <option value="false" selected="@(!Model.SortDesc)">Ascending</option>
                                <option value="true" selected="@Model.SortDesc">Descending</option>
                            </select>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="filter-actions-clean">
                        <button type="submit" class="btn-clean btn-primary-clean">
                            <i class="bi bi-search"></i> Apply Filters
                        </button>
                        @if (!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.SortBy))
                        {
                            <a asp-page-handler="ClearFilters" class="btn-clean btn-secondary-clean">
                                <i class="bi bi-x-circle"></i> Clear Filters
                            </a>
                        }
                    </div>
                </form>
            </div>
        </div>

        <!-- Vehicle List Card -->
        <div class="staff-card-clean">
            <div class="staff-card-header-clean">
                <h3 class="staff-card-title-clean">
                    <i class="bi bi-list-ul"></i>
                    Vehicles
                </h3>
                @if (Model.Vehicles.TotalCount > 0)
                {
                    <span style="color: #888; font-size: 0.875rem; font-weight: 500;">
                        @Model.Vehicles.TotalCount total
                    </span>
                }
            </div>
            <div class="staff-card-body-clean" style="padding: 0;">
                @if (Model.Vehicles.TotalCount == 0)
                {
                    <div class="empty-state-clean">
                        <div class="empty-icon-clean">
                            <i class="bi bi-car-front"></i>
                        </div>
                        <h3 class="empty-title-clean">No Vehicles Found</h3>
                        <p class="empty-description-clean">
                            @if (!string.IsNullOrEmpty(Model.SearchTerm))
                            {
                                <span>Try adjusting your search criteria</span>
                            }
                            else
                            {
                                <span>Get started by adding your first vehicle</span>
                            }
                        </p>
                        <a asp-page="./Create" class="btn-clean btn-primary-clean" style="margin-top: 1rem;">
                            <i class="bi bi-plus-circle"></i>
                            Add First Vehicle
                        </a>
                    </div>
                }
                else
                {
                    <div style="padding: 1.5rem;">
                        @foreach (var vehicle in Model.Vehicles)
                        {
                            <div style="background: #0a0a0a; border: 1px solid #1a1a1a; border-radius: 8px; padding: 1rem; margin-bottom: 1rem; transition: all 0.2s ease;">
                                <div style="display: grid; grid-template-columns: auto 1fr 2fr 1fr auto; gap: 1.5rem; align-items: center;">
                                    <!-- Vehicle Image -->
                                    <div>
                                        <img src="@vehicle.ImageUrl" alt="@vehicle.ModelName"
                                             style="width: 80px; height: 80px; border-radius: 8px; object-fit: cover; border: 1px solid #1a1a1a;">
                                    </div>

                                    <!-- Vehicle Info -->
                                    <div>
                                        <div style="color: #fff; font-weight: 600; font-size: 0.95rem; margin-bottom: 0.25rem;">
                                            @vehicle.ModelName @vehicle.TrimName
                                        </div>
                                        <div style="color: #888; font-size: 0.8rem; margin-bottom: 0.5rem;">
                                            <i class="bi bi-calendar"></i> @vehicle.ModelYear
                                        </div>
                                        <div style="display: inline-block;">
                                            @if (vehicle.IsActive)
                                            {
                                                <span class="badge-clean badge-success" style="font-size: 0.7rem; padding: 0.25rem 0.5rem;">
                                                    <i class="bi bi-check-circle"></i> Active
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge-clean" style="background: rgba(108, 117, 125, 0.15); border-color: rgba(108, 117, 125, 0.4); color: #888; font-size: 0.7rem; padding: 0.25rem 0.5rem;">
                                                    <i class="bi bi-x-circle"></i> Inactive
                                                </span>
                                            }
                                        </div>
                                    </div>

                                    <!-- Specifications (Neutral colors except Stock) -->
                                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.75rem;">
                                        <!-- Battery & Range (Neutral) -->
                                        <div style="padding: 0.5rem 0.75rem; background: rgba(255, 255, 255, 0.03); border-left: 3px solid #333; border-radius: 6px;">
                                            <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
                                                <i class="bi bi-battery-charging" style="color: #888; font-size: 1rem;"></i>
                                                <div>
                                                    <div style="font-size: 0.7rem; color: #888; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600; line-height: 1;">Battery</div>
                                                    <div style="color: #fff; font-weight: 600; font-size: 0.85rem;">@vehicle.BatteryCapacity kWh</div>
                                                </div>
                                            </div>
                                        </div>

                                        <div style="padding: 0.5rem 0.75rem; background: rgba(255, 255, 255, 0.03); border-left: 3px solid #333; border-radius: 6px;">
                                            <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
                                                <i class="bi bi-signpost-2" style="color: #888; font-size: 1rem;"></i>
                                                <div>
                                                    <div style="font-size: 0.7rem; color: #888; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600; line-height: 1;">Range</div>
                                                    <div style="color: #fff; font-weight: 600; font-size: 0.85rem;">@vehicle.RangeKM km</div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Top Speed (Neutral) & Stock (Colored based on level) -->
                                        <div style="padding: 0.5rem 0.75rem; background: rgba(255, 255, 255, 0.03); border-left: 3px solid #333; border-radius: 6px;">
                                            <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
                                                <i class="bi bi-speedometer2" style="color: #888; font-size: 1rem;"></i>
                                                <div>
                                                    <div style="font-size: 0.7rem; color: #888; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600; line-height: 1;">Top Speed</div>
                                                    <div style="color: #fff; font-weight: 600; font-size: 0.85rem;">@vehicle.TopSpeed km/h</div>
                                                </div>
                                            </div>
                                        </div>

                                        <div style="padding: 0.5rem 0.75rem; background: @(vehicle.Stock <= 0 ? "rgba(239, 68, 68, 0.08)" : vehicle.Stock <= 5 ? "rgba(245, 158, 11, 0.08)" : "rgba(34, 197, 94, 0.08)"); border-left: 3px solid @(vehicle.Stock <= 0 ? "#ef4444" : vehicle.Stock <= 5 ? "#f59e0b" : "#22c55e"); border-radius: 6px;">
                                            <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
                                                <i class="bi bi-box-seam" style="color: @(vehicle.Stock <= 0 ? "#ef4444" : vehicle.Stock <= 5 ? "#f59e0b" : "#22c55e"); font-size: 1rem;"></i>
                                                <div>
                                                    <div style="font-size: 0.7rem; color: #888; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600; line-height: 1;">Stock</div>
                                                    <div style="color: #fff; font-weight: 600; font-size: 0.85rem;">@vehicle.Stock units</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Price -->
                                    <div style="text-align: center;">
                                        <div style="font-size: 0.7rem; color: #888; text-transform: uppercase; letter-spacing: 0.5px; font-weight: 600; margin-bottom: 0.25rem;">Base Price</div>
                                        <div style="color: #0070f3; font-weight: 700; font-size: 1.1rem;">
                                            $@vehicle.BasePrice.ToString("N0")
                                        </div>
                                    </div>

                                    <!-- Actions -->
                                    <div style="display: flex; gap: 0.5rem;">
                                        <a asp-page="./Details" asp-route-id="@vehicle.Id"
                                           class="btn-action-clean" title="View Details"
                                           style="font-size: 0.75rem; padding: 0.4rem 0.75rem;">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <a asp-page="./Edit" asp-route-id="@vehicle.Id"
                                           class="btn-action-clean" title="Edit Vehicle"
                                           style="font-size: 0.75rem; padding: 0.4rem 0.75rem;">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <button type="button" class="btn-action-clean btn-action-danger"
                                                onclick="showDeleteModal('@vehicle.Id', '@vehicle.ModelName @vehicle.TrimName')"
                                                title="Delete Vehicle"
                                                style="font-size: 0.75rem; padding: 0.4rem 0.75rem;">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    @if (Model.Vehicles.TotalPages > 1)
                    {
                        <div style="padding: 0 1.5rem 1.5rem 1.5rem;">
                            <div class="pagination-clean">
                                @if (Model.Vehicles.HasPrevious)
                                {
                                    <a class="page-btn-clean"
                                       asp-page="./Index"
                                       asp-route-PageNumber="@(Model.Vehicles.CurrentPage - 1)"
                                       asp-route-PageSize="@Model.Vehicles.PageSize"
                                       asp-route-SearchTerm="@Model.SearchTerm"
                                       asp-route-SortBy="@Model.SortBy"
                                       asp-route-SortDesc="@Model.SortDesc">
                                        <i class="bi bi-chevron-left"></i>
                                    </a>
                                }

                                @for (var i = Math.Max(1, Model.Vehicles.CurrentPage - 2); i <= Math.Min(Model.Vehicles.TotalPages, Model.Vehicles.CurrentPage + 2); i++)
                                {
                                    <a class="page-btn-clean @(i == Model.Vehicles.CurrentPage ? "active" : "")"
                                       asp-page="./Index"
                                       asp-route-PageNumber="@i"
                                       asp-route-PageSize="@Model.Vehicles.PageSize"
                                       asp-route-SearchTerm="@Model.SearchTerm"
                                       asp-route-SortBy="@Model.SortBy"
                                       asp-route-SortDesc="@Model.SortDesc">
                                        @i
                                    </a>
                                }

                                @if (Model.Vehicles.HasNext)
                                {
                                    <a class="page-btn-clean"
                                       asp-page="./Index"
                                       asp-route-PageNumber="@(Model.Vehicles.CurrentPage + 1)"
                                       asp-route-PageSize="@Model.Vehicles.PageSize"
                                       asp-route-SearchTerm="@Model.SearchTerm"
                                       asp-route-SortBy="@Model.SortBy"
                                       asp-route-SortDesc="@Model.SortDesc">
                                        <i class="bi bi-chevron-right"></i>
                                    </a>
                                }
                            </div>

                            <div class="pagination-info-clean">
                                Showing @((Model.Vehicles.CurrentPage - 1) * Model.Vehicles.PageSize + 1) to
                                @Math.Min(Model.Vehicles.CurrentPage * Model.Vehicles.PageSize, Model.Vehicles.TotalCount) of
                                @Model.Vehicles.TotalCount vehicles
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-clean">
            <div class="modal-header-clean" style="background: rgba(239, 68, 68, 0.1); border-bottom-color: rgba(239, 68, 68, 0.3);">
                <h3 class="modal-title-clean" style="color: #ef4444;">
                    <i class="bi bi-exclamation-triangle"></i>
                    Confirm Delete
                </h3>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form id="deleteForm" method="post" asp-page-handler="Delete">
                @Html.AntiForgeryToken()
                <input type="hidden" name="id" id="deleteVehicleId" />
                <div class="modal-body-clean">
                    <div class="alert alert-warning" style="margin-bottom: 1rem;">
                        <i class="bi bi-exclamation-triangle"></i>
                        This action cannot be undone. The vehicle will be permanently removed from the system.
                    </div>
                    <p id="deleteMessage" style="margin: 0; color: #ccc; font-size: 0.9rem;"></p>
                </div>
                <div class="modal-footer-clean">
                    <button type="button" class="btn-clean btn-secondary-clean" data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="submit" class="btn-clean btn-danger-clean">
                        <i class="bi bi-trash"></i> Delete Vehicle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showDeleteModal(vehicleId, vehicleName) {
            const message = document.getElementById('deleteMessage');
            const hiddenId = document.getElementById('deleteVehicleId');

            hiddenId.value = vehicleId;
            message.innerHTML = `Are you sure you want to delete <strong style="color: #fff;">${vehicleName}</strong>?`;

            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        // Auto-hide alerts
        setTimeout(function () {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                alert.style.opacity = '0';
                setTimeout(() => alert.remove(), 300);
            });
        }, 5000);
    </script>
    
    <!-- Generate Spec Preview Modal -->
    <div class="modal fade" id="specPreviewModal" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content modal-clean">
                <div class="modal-header-clean">
                    <h3 class="modal-title-clean">Generated Vehicle Spec (Preview)</h3>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body-clean">
                    <p class="text-muted">Review and edit the JSON spec below. When ready, press <strong>Create</strong> to add the vehicle to inventory.</p>
                    <textarea id="specEditor" class="form-control" rows="12" style="background:#0b0b0b; color:#ddd; font-family: Consolas, monospace;"></textarea>
                    <div id="specPreviewError" style="color:#f66; margin-top:0.5rem; display:none;"></div>
                </div>
                <div class="modal-footer-clean">
                    <button type="button" class="btn-clean btn-secondary-clean" data-bs-dismiss="modal">Cancel</button>
                    <button id="confirmCreateBtn" type="button" class="btn-clean btn-primary-clean">Create</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Auto Create Confirmation Modal -->
    <div class="modal fade" id="autoCreateModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content modal-clean">
                <div class="modal-header-clean">
                    <h3 class="modal-title-clean">Auto Create Vehicle</h3>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body-clean">
                    <p>This will instruct the assistant to generate a vehicle spec and immediately create the vehicle in inventory. This action is irreversible. Are you sure you want to proceed?</p>
                    <p class="text-warning"><strong>Warning:</strong> Use only when you trust the assistant's outputs. Consider using Generate Spec (preview) first.</p>
                </div>
                <div class="modal-footer-clean">
                    <button type="button" class="btn-clean btn-secondary-clean" data-bs-dismiss="modal">Cancel</button>
                    <button id="confirmAutoCreateBtn" type="button" class="btn-clean btn-danger-clean">Proceed</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.7/signalr.min.js" integrity="sha512-kmFd2qZsz5s7Zr5q2T6b5u1T1YpWZp0z3KqQYkJq3qY6g/2f5S2sOj5yqkG6G9vQb0TnQ7J7m0Q2c1J0fG5z/w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        (function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/chatbotHub')
                .withAutomaticReconnect()
                .build();

            const responses = document.getElementById('responses');
            const askBtn = document.getElementById('askBtn');
            const chatPrompt = document.getElementById('chatPrompt');

            // Create a response DOM element for the assistant text
            function createResponseElement(text) {
                const wrapper = document.createElement('div');
                wrapper.style.background = 'rgba(255,255,255,0.02)';
                wrapper.style.padding = '1rem';
                wrapper.style.borderRadius = '6px';
                wrapper.style.marginBottom = '0.75rem';

                const header = document.createElement('div');
                header.style.fontWeight = '600';
                header.style.color = '#fff';
                header.style.marginBottom = '0.5rem';
                header.textContent = 'Assistant Response';

                const pre = document.createElement('pre');
                pre.style.whiteSpace = 'pre-wrap';
                pre.style.color = '#ddd';
                pre.style.margin = '0';
                pre.textContent = text || '';

                wrapper.appendChild(header);
                wrapper.appendChild(pre);
                return wrapper;
            }

            // Build a response wrapper around a DOM node (like a table)
            function createResponseElementFromNode(node) {
                const wrapper = document.createElement('div');
                wrapper.style.background = 'rgba(255,255,255,0.02)';
                wrapper.style.padding = '1rem';
                wrapper.style.borderRadius = '6px';
                wrapper.style.marginBottom = '0.75rem';

                const header = document.createElement('div');
                header.style.fontWeight = '600';
                header.style.color = '#fff';
                header.style.marginBottom = '0.5rem';
                header.textContent = 'Assistant Response';

                wrapper.appendChild(header);
                wrapper.appendChild(node);
                return wrapper;
            }

            // Convert an HTML string containing <ul>/<li> entries into a table element
            function createTableFromHtml(htmlString) {
                // Use a temporary container to parse the HTML
                const tmp = document.createElement('div');
                tmp.innerHTML = htmlString;

                // Try to find list items
                const items = tmp.querySelectorAll('li');
                if (!items || items.length === 0) {
                    // Fallback: return a pre element with raw HTML escaped
                    const pre = document.createElement('pre');
                    pre.style.whiteSpace = 'pre-wrap';
                    pre.style.color = '#ddd';
                    pre.style.margin = '0';
                    pre.textContent = htmlString;
                    return pre;
                }

                const table = document.createElement('table');
                table.style.width = '100%';
                table.style.borderCollapse = 'collapse';

                const thead = document.createElement('thead');
                const headerRow = document.createElement('tr');
                const th1 = document.createElement('th');
                th1.textContent = 'Vehicle';
                th1.style.textAlign = 'left';
                th1.style.padding = '0.5rem';
                th1.style.color = '#fff';
                const th2 = document.createElement('th');
                th2.textContent = 'Recommendation';
                th2.style.textAlign = 'left';
                th2.style.padding = '0.5rem';
                th2.style.color = '#fff';
                headerRow.appendChild(th1);
                headerRow.appendChild(th2);
                thead.appendChild(headerRow);
                table.appendChild(thead);

                const tbody = document.createElement('tbody');
                items.forEach(li => {
                    // Extract vehicle name from <strong> if present
                    const strong = li.querySelector('strong');
                    let vehicle = '';
                    let recommendation = li.innerHTML || li.textContent || '';
                    if (strong) {
                        vehicle = strong.textContent.trim();
                        // remove the strong HTML from the innerHTML to get the remainder
                        const clone = li.cloneNode(true);
                        const s = clone.querySelector('strong');
                        if (s) s.remove();
                        recommendation = clone.textContent.replace(/^:\s*/, '').trim();
                    } else {
                        // attempt to split on ':'
                        const text = li.textContent || '';
                        const parts = text.split(':');
                        if (parts.length > 1) {
                            vehicle = parts[0].trim();
                            recommendation = parts.slice(1).join(':').trim();
                        } else {
                            vehicle = text.trim();
                            recommendation = '';
                        }
                    }

                    const row = document.createElement('tr');
                    const td1 = document.createElement('td');
                    td1.style.padding = '0.5rem';
                    td1.style.verticalAlign = 'top';
                    td1.style.color = '#ddd';
                    td1.innerHTML = '<strong style="color:#fff;">' + vehicle + '</strong>';

                    const td2 = document.createElement('td');
                    td2.style.padding = '0.5rem';
                    td2.style.color = '#ddd';
                    td2.textContent = recommendation;

                    row.appendChild(td1);
                    row.appendChild(td2);
                    tbody.appendChild(row);
                });

                table.appendChild(tbody);
                return table;
            }

            // Sanitize a small allowlist of HTML tags and return a safe node (preferably a TABLE)
            // Allowed tags: table, thead, tbody, tr, th, td, strong, em, br, b, i, u
            function sanitizeHtmlTable(htmlString) {
                if (!htmlString) return null;
                const tmp = document.createElement('div');
                tmp.innerHTML = htmlString;

                // Find the first table if present
                const table = tmp.querySelector('table');
                const container = document.createElement('div');

                // Helper to recursively sanitize nodes
                function sanitizeNode(node, outParent) {
                    if (node.nodeType === Node.TEXT_NODE) {
                        outParent.appendChild(document.createTextNode(node.textContent));
                        return;
                    }
                    if (node.nodeType !== Node.ELEMENT_NODE) return;

                    const tag = node.tagName.toLowerCase();
                    const allowed = {
                        'table': true,
                        'thead': true,
                        'tbody': true,
                        'tr': true,
                        'th': true,
                        'td': true,
                        'strong': true,
                        'b': true,
                        'em': true,
                        'i': true,
                        'u': true,
                        'br': true
                    };

                    if (!allowed[tag]) {
                        // If not allowed, recurse into children but do not include this tag
                        node.childNodes.forEach(child => sanitizeNode(child, outParent));
                        return;
                    }

                    const el = document.createElement(tag);
                    // Only allow minimal attributes for table cells
                    if (tag === 'th' || tag === 'td') {
                        // allow colspan/rowspan if numeric
                        const colspan = node.getAttribute && node.getAttribute('colspan');
                        const rowspan = node.getAttribute && node.getAttribute('rowspan');
                        if (colspan && /^\d+$/.test(colspan)) el.setAttribute('colspan', colspan);
                        if (rowspan && /^\d+$/.test(rowspan)) el.setAttribute('rowspan', rowspan);
                    }

                    node.childNodes.forEach(child => sanitizeNode(child, el));
                    outParent.appendChild(el);
                }

                if (table) {
                    sanitizeNode(table, container);
                    // Return the sanitized table node (first child)
                    return container.firstElementChild || container;
                }

                // If no table found, try to sanitize the whole snippet and return a container
                tmp.childNodes.forEach(n => sanitizeNode(n, container));
                return container;
            }

            // Safely extract a readable string from a payload that may be a string or an object
            function formatPayload(payload) {
                if (!payload) return '';
                if (typeof payload === 'string') return payload;
                // payload may be an object with a Response property
                const resp = payload.Response || payload.response || payload.message || payload.text;
                if (resp) {
                    if (typeof resp === 'string') return resp;
                    try {
                        return JSON.stringify(resp, null, 2);
                    } catch (e) {
                        return String(resp);
                    }
                }
                // Fallback: pretty-print the whole payload
                try {
                    return JSON.stringify(payload, null, 2);
                } catch (e) {
                    return String(payload);
                }
            }

            // Track the last pending response element so we can replace it when the assistant replies
            let lastPendingElement = null;

            connection.on('ReceiveChatbotResponse', function (payload) {
                // payload expected to have { GroupId, Response, ResponseHtml, Timestamp } or be a string
                const rawResp = payload && (payload.Response || payload.response || payload) || '';
                const responseHtml = payload && (payload.ResponseHtml || payload.responseHtml || null);

                // Prefer sanitized HTML table when provided by the server
                if (responseHtml) {
                    const safeNode = sanitizeHtmlTable(responseHtml);
                    if (lastPendingElement) {
                        if (safeNode) lastPendingElement.replaceWith(createResponseElementFromNode(safeNode));
                        else {
                            const pre = lastPendingElement.querySelector('pre');
                            if (pre) pre.textContent = formatPayload(rawResp || payload);
                        }
                        lastPendingElement = null;
                        return;
                    }

                    if (safeNode) {
                        responses.prepend(createResponseElementFromNode(safeNode));
                        return;
                    }
                    // fallback to text if sanitization didn't produce a node
                }

                // fallback: handle lists or plain text as before
                const text = (typeof rawResp === 'string') ? rawResp : (typeof rawResp === 'object' ? JSON.stringify(rawResp) : String(rawResp));
                const looksLikeHtmlList = /<\s*(ul|ol)\b|<\s*li\b|&lt;\s*(ul|ol)\b|&lt;\s*li\b/i.test(text);

                if (lastPendingElement) {
                    if (looksLikeHtmlList) {
                        const table = createTableFromHtml(text);
                        const newEl = createResponseElementFromNode(table);
                        lastPendingElement.replaceWith(newEl);
                    } else {
                        const pre = lastPendingElement.querySelector('pre');
                        if (pre) pre.textContent = formatPayload(payload);
                    }
                    lastPendingElement = null;
                } else {
                    if (looksLikeHtmlList) {
                        const table = createTableFromHtml(text);
                        responses.prepend(createResponseElementFromNode(table));
                    } else {
                        responses.prepend(createResponseElement(formatPayload(payload)));
                    }
                }
            });

            connection.on('ReceiveChatbotError', function (payload) {
                const msg = 'Error: ' + (payload && (payload.Error || payload.error || payload.message) || 'Unknown error');
                // replace pending if exists
                if (lastPendingElement) {
                    const pre = lastPendingElement.querySelector('pre');
                    if (pre) pre.textContent = msg;
                    lastPendingElement = null;
                } else {
                    responses.prepend(createResponseElement(msg));
                }
            });

            // disable ask button until connected and joined
            askBtn.disabled = true;

            // create or reuse a session group id so that group broadcasts are captured
            let sessionGroupId = 'manager-' + Math.random().toString(36).substring(2, 9);

            // start connection and join the group; enable ask button after success
            connection.start().then(function () {
                connection.invoke('JoinChatGroup', sessionGroupId)
                    .then(function () {
                        askBtn.disabled = false;
                    })
                    .catch(err => {
                        console.error('JoinChatGroup failed:', err.toString());
                        // still enable ask button so user can try, but warn
                        askBtn.disabled = false;
                    });
            }).catch(err => console.error('Connection start failed:', err.toString()));

            askBtn.addEventListener('click', function () {
                const prompt = chatPrompt.value;
                if (!prompt || prompt.trim().length === 0) {
                    alert('Please enter a prompt.');
                    return;
                }

                connection.invoke('AskChatbot', prompt, sessionGroupId)
                    .catch(err => {
                        console.error(err.toString());
                        // show error immediately
                        responses.prepend(createResponseElement('Error sending request: ' + err.toString()));
                    });

                // Show a pending indicator and keep a reference so we can replace it when the reply arrives
                lastPendingElement = createResponseElement('Waiting for assistant...');
                responses.prepend(lastPendingElement);

                // Clear prompt
                chatPrompt.value = '';
            });

            // Generate Spec flow (two-step)
            const generateSpecBtn = document.getElementById('generateSpecBtn');
            const specModalEl = document.getElementById('specPreviewModal');
            const specEditor = document.getElementById('specEditor');
            const confirmCreateBtn = document.getElementById('confirmCreateBtn');
            const specPreviewError = document.getElementById('specPreviewError');
            const specModal = new bootstrap.Modal(specModalEl);

            generateSpecBtn.addEventListener('click', function () {
                const prompt = chatPrompt.value;
                if (!prompt || prompt.trim().length === 0) {
                    alert('Please enter an instruction to generate a vehicle spec.');
                    return;
                }

                // Request server to generate a spec (preview only)
                connection.invoke('GenerateVehicleSpec', prompt, sessionGroupId)
                    .catch(err => console.error('GenerateVehicleSpec failed:', err.toString()));
            });

            // Auto Create flow (one-shot)
            const autoCreateBtn = document.getElementById('autoCreateBtn');
            const autoCreateModalEl = document.getElementById('autoCreateModal');
            const confirmAutoCreateBtn = document.getElementById('confirmAutoCreateBtn');
            const autoCreateModal = new bootstrap.Modal(autoCreateModalEl);

            autoCreateBtn.addEventListener('click', function () {
                // show confirmation modal
                autoCreateModal.show();
            });

            confirmAutoCreateBtn.addEventListener('click', function () {
                const prompt = chatPrompt.value;
                if (!prompt || prompt.trim().length === 0) {
                    alert('Please enter an instruction for auto-create.');
                    return;
                }

                // Show pending indicator
                lastPendingElement = createResponseElement('Auto-creating vehicle...');
                responses.prepend(lastPendingElement);

                connection.invoke('AutomateAddVehicle', prompt, sessionGroupId)
                    .catch(err => {
                        console.error('AutomateAddVehicle failed:', err.toString());
                        if (lastPendingElement) {
                            const pre = lastPendingElement.querySelector('pre');
                            if (pre) pre.textContent = 'Auto-create request failed: ' + err.toString();
                            lastPendingElement = null;
                        } else {
                            responses.prepend(createResponseElement('Auto-create request failed: ' + err.toString()));
                        }
                    });

                autoCreateModal.hide();
            });

            // When auto-create results come back, replace pending
            connection.on('ReceiveAutomateAddVehicleResult', function (payload) {
                const vehicle = payload && payload.Vehicle ? payload.Vehicle : null;
                if (lastPendingElement) {
                    if (vehicle) {
                        lastPendingElement.replaceWith(createResponseElement('Vehicle auto-created: ' + (vehicle.ModelName || '') + ' ' + (vehicle.TrimName || '')));
                    } else {
                        lastPendingElement.replaceWith(createResponseElement('Vehicle auto-created.'));
                    }
                    lastPendingElement = null;
                    return;
                }
                // fallback
                if (vehicle) responses.prepend(createResponseElement('Vehicle auto-created: ' + (vehicle.ModelName || '') + ' ' + (vehicle.TrimName || '')));
                else responses.prepend(createResponseElement('Vehicle auto-created.'));
            });

            connection.on('ReceiveAutomateAddVehicleError', function (payload) {
                const err = payload && (payload.Error || payload.error) || 'Unknown error creating vehicle';
                if (lastPendingElement) {
                    const pre = lastPendingElement.querySelector('pre');
                    if (pre) pre.textContent = 'Auto-create failed: ' + err;
                    lastPendingElement = null;
                    return;
                }
                responses.prepend(createResponseElement('Auto-create failed: ' + err));
            });

            // Receive generated spec (only sent to caller by the hub)
            connection.on('ReceiveGeneratedVehicleSpec', function (payload) {
                const raw = payload && payload.Spec ? payload.Spec : '';
                // Normalize: strip code fences if present
                const cleaned = String(raw).replace(/```(?:\w+)?\n([\s\S]*?)```/, '$1').trim();
                specEditor.value = cleaned;
                specPreviewError.style.display = 'none';
                specModal.show();
            });

            // Handle confirm create
            confirmCreateBtn.addEventListener('click', function () {
                const spec = specEditor.value;
                if (!spec || spec.trim().length === 0) {
                    specPreviewError.textContent = 'Specification cannot be empty.';
                    specPreviewError.style.display = 'block';
                    return;
                }

                try {
                    // Quick client-side JSON sanity check
                    JSON.parse(spec);
                } catch (e) {
                    specPreviewError.textContent = 'Invalid JSON: ' + e.message;
                    specPreviewError.style.display = 'block';
                    return;
                }

                // Invoke server to create the vehicle from spec
                connection.invoke('CreateVehicleFromSpec', spec, sessionGroupId)
                    .catch(err => {
                        console.error('CreateVehicleFromSpec failed:', err.toString());
                        specPreviewError.textContent = 'Create request failed: ' + err.toString();
                        specPreviewError.style.display = 'block';
                    });

                // Close modal and clear
                specModal.hide();
                specEditor.value = '';
            });

            // Handle create result / error
            connection.on('ReceiveAutomateAddVehicleResult', function (payload) {
                const vehicle = payload && payload.Vehicle ? payload.Vehicle : null;
                if (vehicle) {
                    responses.prepend(createResponseElement('Vehicle created: ' + (vehicle.ModelName || '') + ' ' + (vehicle.TrimName || '')));
                } else {
                    responses.prepend(createResponseElement('Vehicle created.'));
                }
            });

            connection.on('ReceiveAutomateAddVehicleError', function (payload) {
                const err = payload && (payload.Error || payload.error) || 'Unknown error creating vehicle';
                responses.prepend(createResponseElement('Create failed: ' + err));
            });
        })();
    </script>
}
